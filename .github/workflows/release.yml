name: Release Workflow

on:
  push:
    branches: [master]

permissions:
  contents: write
  pull-requests: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      hasNextVersion: ${{ steps.version.outputs.hasNextVersion }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get next version
        uses: thenativeweb/get-next-version@2.6.2
        id: version

      - name: Debug version output
        run: |
          echo "Has next version: ${{ steps.version.outputs.hasNextVersion }}"
          echo "Next version: ${{ steps.version.outputs.version }}"

  build-and-release:
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.hasNextVersion == 'true'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 22
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - name: Install Dependencies (npm)
        run: npm install

      - name: Build
        run: npm run build
      - name: Update version files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          NEW_VERSION="${{ needs.check-version.outputs.version }}"

          echo "Current version: $CURRENT_VERSION"
          echo "New version: $NEW_VERSION"

          if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
            # Update package.json version
            npm version $NEW_VERSION --no-git-tag-version
            echo "Version updated in package.json from $CURRENT_VERSION to $NEW_VERSION"

            # Run version-bump script to update manifest.json and versions.json
            npm run version
            echo "Updated manifest.json and versions.json via version-bump script"

            # Show which files were changed
            echo "Files changed by version update:"
            git status --porcelain
          else
            echo "Version is already $NEW_VERSION, skipping version updates"
          fi

      - name: Build plugin
        run: npm run build

      - name: Verify build artifacts
        run: |
          ls -la dist/
          test -f dist/main.js || exit 1
          test -f dist/manifest.json || exit 1
          test -f dist/styles.css || exit 1
          echo "All required build artifacts are present"

      - name: Commit and push version changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION="${{ needs.check-version.outputs.version }}"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if there are any changes to commit
          if ! git diff --quiet || ! git diff --cached --quiet; then
            echo "Changes detected, committing version files:"
            git status --porcelain

            # Add all version-related files
            git add package.json manifest.json versions.json

            # Commit the changes
            git commit -m "chore: bump version to $NEW_VERSION [skip ci]"

            # Push the changes back to master
            git push origin master
            echo "Version changes pushed to repository"
          else
            echo "No changes to commit"
          fi

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION="${{ needs.check-version.outputs.version }}"

          # Create and push the tag
          git tag $NEW_VERSION
          git push origin $NEW_VERSION
          echo "Tag $NEW_VERSION created and pushed"

      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION="${{ needs.check-version.outputs.version }}"

          # Create the release with the built artifacts
          gh release create $NEW_VERSION \
            --title "$NEW_VERSION" \
            --notes "Automated release $NEW_VERSION" \
            --latest \
            dist/main.js \
            dist/manifest.json \
            dist/styles.css

          echo "GitHub release $NEW_VERSION created successfully"
